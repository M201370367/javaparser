#summary How to use this Java Parser
#labels Featured

= Sample Usage =

If you have questions of how to use this parser, post a comment here, the answer can help other people.

== Printing the !CompilationUnit to System output ==

{{{
public class CuPrinter {

    public static void main(String[] args) throws Exception {
        // creates an input stream for the file to be parsed
        FileInputStream in = new FileInputStream("test.java");

        CompilationUnit cu;
        try {
            // parse the file
            cu = JavaParser.parse(in);
        } finally {
            in.close();
        }

        // prints the resulting compilation unit to default system output
        System.out.println(cu.toString());
    }
}}}

== Visiting class methods ==

{{{
public class MethodPrinter {

    public static void main(String[] args) throws Exception {
        // creates an input stream for the file to be parsed
        FileInputStream in = new FileInputStream("test.java");

        CompilationUnit cu;
        try {
            // parse the file
            cu = JavaParser.parse(in);
        } finally {
            in.close();
        }

        // visit and print the methods names
        new MethodVisitor().visit(cu, null);
    }

    /**
     * Simple visitor implementation for visiting MethodDeclaration nodes. 
     */
    private static class MethodVisitor extends VoidVisitorAdapter {

        @Override
        public void visit(MethodDeclaration n, Object arg) {
            // here you can access the attributes of the method.
            // this method will be called for all methods in this 
            // CompilationUnit, including inner class methods
            System.out.println(n.getName());
        }
    }
}
}}}

== Changing methods from a class methods with visitor ==

{{{
public class MethodChanger {

	public static void main(String[] args) throws Exception {
		// creates an input stream for the file to be parsed
		FileInputStream in = new FileInputStream("test.java");

		CompilationUnit cu;
		try {
			// parse the file
			cu = JavaParser.parse(in);
		} finally {
			in.close();
		}

		// visit and change the methods names and parameters
		new MethodChangerVisitor().visit(cu, null);

		// prints the changed compilation
		System.out.println(cu.toString());
	}

	/**
	 * Simple visitor implementation for visiting MethodDeclaration nodes.
	 */
	private static class MethodChangerVisitor extends VoidVisitorAdapter {

		@Override
		public void visit(MethodDeclaration n, Object arg) {
			// change the name of the method to upper case
			n.setName(n.getName().toUpperCase());

			// add a new parameter to the method (int value)
			List<Parameter> parameters = n.getParameters();
			if (parameters == null) {
				parameters = new ArrayList<Parameter>(1);
				n.setParameters(parameters);
			}
			Parameter newArg = createArg(Primitive.Int, "value");
			parameters.add(newArg);
		}

		/**
		 * create and return a parameter with primitive type
		 */
		private Parameter createArg(Primitive type, String name) {
			Parameter ret = new Parameter();
			VariableDeclaratorId id = new VariableDeclaratorId();
			id.setName(name);
			ret.setId(id);
			PrimitiveType pt = new PrimitiveType();
			pt.setType(type);
			ret.setType(pt);
			return ret;
		}
	}
}
}}}

== Changing methods from a class methods without visitor ==

{{{
public class MethodChanger {

	public static void main(String[] args) throws Exception {
		// creates an input stream for the file to be parsed
		FileInputStream in = new FileInputStream("test.java");

		CompilationUnit cu;
		try {
			// parse the file
			cu = JavaParser.parse(in);
		} finally {
			in.close();
		}

		// change the methods names and parameters
		changeMethods(cu);

		// prints the changed compilation
		System.out.println(cu.toString());
	}

	private static void changeMethods(CompilationUnit cu) {
		List<TypeDeclaration> types = cu.getTypes();
		for (TypeDeclaration type : types) {
			List<BodyDeclaration> members = type.getMembers();
			for (BodyDeclaration member : members) {
				if (member instanceof MethodDeclaration) {
					MethodDeclaration method = (MethodDeclaration) member;
					changeMethod(method);
				}
			}
		}
	}

	private static void changeMethod(MethodDeclaration n) {
		// change the name of the method to upper case
		n.setName(n.getName().toUpperCase());

		// add a new parameter to the method (int value)
		List<Parameter> parameters = n.getParameters();
		if (parameters == null) {
			parameters = new ArrayList<Parameter>(1);
			n.setParameters(parameters);
		}
		Parameter newArg = createArg(Primitive.Int, "value");
		parameters.add(newArg);
	}

	/**
	 * create and return a parameter with primitive type
	 */
	private static Parameter createArg(Primitive type, String name) {
		Parameter ret = new Parameter();
		VariableDeclaratorId id = new VariableDeclaratorId();
		id.setName(name);
		ret.setId(id);
		PrimitiveType pt = new PrimitiveType();
		pt.setType(type);
		ret.setType(pt);
		return ret;
	}
}
}}}

== Creating a !CompilationUnit from scratch ==

{{{
	// TODO:
}}}